# Automatically generated by Pynguin.
import pytest
import sdc_scissor.obstacle_api.beamng_delineator as module_0


def test_case_0():
    beamng_delineator_0 = module_0.BeamngDelineator()
    assert (
        f"{type(beamng_delineator_0).__module__}.{type(beamng_delineator_0).__qualname__}"
        == "sdc_scissor.obstacle_api.beamng_delineator.BeamngDelineator"
    )
    assert beamng_delineator_0.x_pos is None
    assert beamng_delineator_0.y_pos is None
    assert beamng_delineator_0.z_pos is None
    assert beamng_delineator_0.radius == pytest.approx(0.2, abs=0.01, rel=0.01)
    assert beamng_delineator_0.height == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert beamng_delineator_0.rot is None
    assert beamng_delineator_0.rot_quat == (0, 0, 0, 1)
    assert beamng_delineator_0.obstacle_type == "procedural"


def test_case_1():
    beamng_delineator_0 = module_0.BeamngDelineator()
    assert (
        f"{type(beamng_delineator_0).__module__}.{type(beamng_delineator_0).__qualname__}"
        == "sdc_scissor.obstacle_api.beamng_delineator.BeamngDelineator"
    )
    assert beamng_delineator_0.x_pos is None
    assert beamng_delineator_0.y_pos is None
    assert beamng_delineator_0.z_pos is None
    assert beamng_delineator_0.radius == pytest.approx(0.2, abs=0.01, rel=0.01)
    assert beamng_delineator_0.height == pytest.approx(1.0, abs=0.01, rel=0.01)
    assert beamng_delineator_0.rot is None
    assert beamng_delineator_0.rot_quat == (0, 0, 0, 1)
    assert beamng_delineator_0.obstacle_type == "procedural"
    var_0 = beamng_delineator_0.get()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "beamngpy.scenario.ProceduralCylinder"
    assert var_0.id == "pyCylinder"
    assert var_0.name == "pyCylinder"
    assert var_0.type == "ProceduralMesh"
    assert var_0.pos == (None, None, None)
    assert var_0.rot == (0, 0, 0, 1)
    assert var_0.scale == (1, 1, 1)
    assert var_0.opts == {}
    assert var_0.children == []
    assert var_0.material is None
    assert var_0.radius == pytest.approx(0.2, abs=0.01, rel=0.01)
    assert var_0.height == pytest.approx(1.0, abs=0.01, rel=0.01)
